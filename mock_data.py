
def data():
    data = """
43.98402772 6
43.17803625 6.5
45.88979588 7
46.87559402 7.5
45.40618137 8
46.11432693 8.5
47.96288959 9
46.5785804 9.5
48.50357178 10
47.64669796 10.5
47.53592348 11
46.8354213 11.5
49.92947281 12
49.50217145 12.5
47.98853212 13
49.3097821 13.5
48.56860036 14
52.28962677 14.5
50.23754338 15
51.48043932 15.5
50.69638991 16
49.35224081 16.5
50.93052388 17
51.77511177 17.5
52.24111818 18
52.39370588 18.5
52.09020985 19
51.11490886 19.5
52.73176835 20
51.45852701 20.5
51.78180281 21
52.64994225 21.5
56.389043 22
52.89073658 22.5
52.76004298 23
53.46775176 23.5
53.74947347 24
53.61819976 24.5
54.84571764 25
53.0987365 25.5
55.99541138 26
53.3812831 26.5
54.25533076 27
55.57718878 27.5
54.20481044 28
54.69124401 28.5
54.87998121 29
57.14603557 29.5
54.71558418 30
54.47638592 30.5
57.13227045 31
55.59287997 31.5
58.04551577 32
57.61250219 32.5
57.43780632 33
57.79752793 33.5
58.58793295 34
56.56820095 34.5
56.66957552 35
57.72501078 35.5
58.24663498 36
58.04073028 36.5
58.40480008 37
58.82933667 37.5
58.86037241 38
57.70830206 38.5
59.06099571 39
59.72919277 39.5
59.16159195 40
58.92557101 40.5
61.33483012 41
59.32877787 41.5
59.30508794 42
59.46094621 42.5
61.38341026 43
58.50897888 43.5
61.06864278 44
60.18737175 44.5
62.43835715 45
61.76315489 45.5
61.92214371 46
61.05849841 46.5
61.04947933 47
61.61502541 47.5
61.36380161 48
62.21533319 48.5
61.88293326 49
60.87357543 49.5
60.08009243 50
63.24976316 50.5
63.48265123 51
62.20195194 51.5
61.2765477 52
61.7322066 52.5
63.11674178 53
64.03825269 53.5
61.01738653 54
63.08914197 54.5
62.78381865 55
63.43571966 55.5
64.08637383 56
62.53010065 56.5
63.85514221 57
63.73070654 57.5
64.8721563 58
65.92686774 58.5
63.82511047 59
63.25767425 59.5
63.41433784 60
65.03861533 60.5
66.1240388 61
65.85133755 61.5
65.0961779 62
64.07901133 62.5
64.30655791 63
63.7567965 63.5
66.15093493 64
66.13885466 64.5
65.9318354 65
64.60932557 65.5
65.31794263 66
64.42971814 66.5
66.01482507 67
65.8958647 67.5
63.74341617 68
65.89498638 68.5
66.69934385 69
66.32360874 69.5
65.68974012 70
66.69325981 70.5
66.92977716 71
66.0772346 71.5
65.3192291 72
64.99779412 72.5
65.54007008 73
66.67795409 73.5
67.02745376 74
66.86521045 74.5
66.6337112 75
68.44608935 75.5
69.30296451 76
68.05782335 76.5
66.98927424 77
68.37547095 77.5
66.96378958 78
66.56059041 78.5
67.55303456 79
68.56780754 79.5
68.48957849 80
67.87006808 80.5
67.92347977 81
68.72367967 81.5
67.75677913 82
68.94020807 82.5
67.32127531 83
69.57066268 83.5
70.50044458 84
68.06615838 84.5
68.59346364 85
69.88113082 85.5
71.07478954 86
68.21547926 86.5
69.35278621 87
70.18286979 87.5
72.04849855 88
69.82981735 88.5
67.96951695 89
71.74989615 89.5
"""
    return data


def split_data(data):
    """
    Given a data input string representing 
    distance *space* temperature *newline*
     
    Output a list of temperature/distance pairs (note order switching per my preference)
    
    :param data: a string
    :return list: a list of tuples (temp, dist)
    """
    return_data = []
    for line in data.splitlines():
        # print(line)
        if len(line.rstrip()):         
            a, b = line.split(sep=" ")
            # return_data.append((float(a), float(b)))
            return_data.append((float(b), float(a)))
        
    return return_data
    